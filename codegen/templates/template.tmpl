{{define "modelsFile"}}
// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc {{.PormVersion}}

package {{.Package}}

import (
	"encoding/json"
	"time"
)


type DateTime time.Time

const (
	timeFormart = "2006-01-02T15:04:05.000Z"
)

func (t *DateTime) UnmarshalJSON(data []byte) (err error) {
	now, err := time.ParseInLocation(`"`+timeFormart+`"`, string(data), time.Local)
	*t = DateTime(now)
	return
}

func (t DateTime) MarshalJSON() ([]byte, error) {
	b := make([]byte, 0, len(timeFormart)+2)
	b = append(b, '"')
	b = time.Time(t).AppendFormat(b, timeFormart)
	b = append(b, '"')
	return b, nil
}

func (t DateTime) String() string {
	return time.Time(t).Format(timeFormart)
}

type Json struct {
	json.RawMessage
}

{{template "modelsCode" . }}

{{end}}

{{define "modelsCode"}}

// 枚举定义开始
{{range .Enums}}
{{if .Comment}}{{comment .Comment}}{{end}}
type {{.Name}} string

const (
	{{- range .Constants}}
	{{.Name}} {{.Type}} = "{{.Value}}"
	{{- end}}
)

{{end}}

// 结构定义开始
{{range .Structs}}
{{if .Comment}}{{comment .Comment}}{{end}}
type {{.Name}} struct { {{- range .Fields}}
  {{- if .Comment}}
  {{comment .Comment}}{{else}}
  {{- end}}
  {{.Name}} {{.Type}} {{if .Tag}}{{$.Q}}{{.Tag}}{{$.Q}}{{end}}
  {{- end}}
}
{{end}}

{{end}}


//=========


// ==========

{{define "queryFile"}}// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc {{.PormVersion}}
// source: {{.SourceName}}

package {{.Package}}

import (
	"context"
	"fmt"
)
{{template "queryCode" . }}
{{end}}

{{define "queryCode"}}

{{range .GoQueries}}

	{{if $.OutputQuery .SourceName}}
	//# name: {{.MethodName}} 
	const {{.ConstantName}} = {{$.Q}}{{escape .SQL}}{{$.Q}}

	{{$input := ""}}
	{{range .Arg}}
		{{$input = print $input "," .Name  " "  .Typ}}
		//{{$input}}
	{{ end }}

	func (t Queries) {{.MethodName}} (ctx context.Context {{$input}}) (res *{{.Ret.Name}}, err error) {
		input := map[string]interface{}{
			{{range .Arg}}
			"{{.Name}}": {{.Name}},//{{.Typ}}
			{{ end }}
		}
		err=t.client.{{.ClientMethod}}(ctx,{{.ConstantName}},input,&res)
		if err != nil {
			fmt.Println(err)
		}
		return
	}
{{end}}
{{end}}

{{end}}

