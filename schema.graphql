input NestedStringFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime]
  notIn: [DateTime]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime]
  notIn: [DateTime]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input PostListRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input UserWhereInput {
  AND: UserWhereInput
  OR: [UserWhereInput]
  NOT: UserWhereInput
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  gender: BoolFilter
  desc: StringNullableFilter
  Post: PostListRelationFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input PostWhereInput {
  AND: PostWhereInput
  OR: [PostWhereInput]
  NOT: PostWhereInput
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  title: StringFilter
  published: BoolFilter
  desc: StringNullableFilter
  author: UserRelationFilter
  userId: StringFilter
}

enum SortOrder {
asc
desc
}

input PostOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
  gender: SortOrder
  desc: SortOrder
  Post: PostOrderByRelationAggregateInput
}

input PostOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  title: SortOrder
  published: SortOrder
  desc: SortOrder
  author: UserOrderByWithRelationInput
  userId: SortOrder
}

input PostWhereUniqueInput {
  id: String
}

enum PostScalarFieldEnum {
id
createdAt
updatedAt
title
published
desc
userId
}

type UserCountOutputType {
  Post: Int!
}

type User {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  gender: Boolean!
  desc: String
  Post(
    where: PostWhereInput
    orderBy: [PostOrderByWithRelationInput]
    cursor: PostWhereUniqueInput
    take: Int
    skip: Int
    distinct: [PostScalarFieldEnum]
  ): [Post]
  _count: UserCountOutputType!
}

type Post {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  published: Boolean!
  desc: String
  author: User!
  userId: String!
}

type PostCountAggregateOutputType {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  title: Int!
  published: Int!
  desc: Int!
  userId: Int!
  _all: Int!
}

type PostMinAggregateOutputType {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  title: String
  published: Boolean
  desc: String
  userId: String
}

type PostMaxAggregateOutputType {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  title: String
  published: Boolean
  desc: String
  userId: String
}

type AggregatePost {
  _count: PostCountAggregateOutputType
  _min: PostMinAggregateOutputType
  _max: PostMaxAggregateOutputType
}

input PostCountOrderByAggregateInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  title: SortOrder
  published: SortOrder
  desc: SortOrder
  userId: SortOrder
}

input PostMaxOrderByAggregateInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  title: SortOrder
  published: SortOrder
  desc: SortOrder
  userId: SortOrder
}

input PostMinOrderByAggregateInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  title: SortOrder
  published: SortOrder
  desc: SortOrder
  userId: SortOrder
}

input PostOrderByWithAggregationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  title: SortOrder
  published: SortOrder
  desc: SortOrder
  userId: SortOrder
  _count: PostCountOrderByAggregateInput
  _max: PostMaxOrderByAggregateInput
  _min: PostMinOrderByAggregateInput
}

input NestedIntFilter {
  equals: Int
  in: [Int]
  notIn: [Int]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedStringWithAggregatesFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

input StringWithAggregatesFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

input NestedDateTimeWithAggregatesFilter {
  equals: DateTime
  in: [DateTime]
  notIn: [DateTime]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedDateTimeFilter
  _max: NestedDateTimeFilter
}

input DateTimeWithAggregatesFilter {
  equals: DateTime
  in: [DateTime]
  notIn: [DateTime]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedDateTimeFilter
  _max: NestedDateTimeFilter
}

input NestedBoolWithAggregatesFilter {
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedBoolFilter
  _max: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedBoolFilter
  _max: NestedBoolFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int]
  notIn: [Int]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input NestedStringNullableWithAggregatesFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedStringNullableFilter
  _max: NestedStringNullableFilter
}

input StringNullableWithAggregatesFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedStringNullableFilter
  _max: NestedStringNullableFilter
}

input PostScalarWhereWithAggregatesInput {
  AND: PostScalarWhereWithAggregatesInput
  OR: [PostScalarWhereWithAggregatesInput]
  NOT: PostScalarWhereWithAggregatesInput
  id: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  title: StringWithAggregatesFilter
  published: BoolWithAggregatesFilter
  desc: StringNullableWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

type PostGroupByOutputType {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  published: Boolean!
  desc: String
  userId: String!
  _count: PostCountAggregateOutputType
  _min: PostMinAggregateOutputType
  _max: PostMaxAggregateOutputType
}

input UserWhereUniqueInput {
  id: String
}

enum UserScalarFieldEnum {
id
createdAt
updatedAt
name
gender
desc
}

type UserCountAggregateOutputType {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  name: Int!
  gender: Int!
  desc: Int!
  _all: Int!
}

type UserMinAggregateOutputType {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  gender: Boolean
  desc: String
}

type UserMaxAggregateOutputType {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  gender: Boolean
  desc: String
}

type AggregateUser {
  _count: UserCountAggregateOutputType
  _min: UserMinAggregateOutputType
  _max: UserMaxAggregateOutputType
}

input UserCountOrderByAggregateInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
  gender: SortOrder
  desc: SortOrder
}

input UserMaxOrderByAggregateInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
  gender: SortOrder
  desc: SortOrder
}

input UserMinOrderByAggregateInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
  gender: SortOrder
  desc: SortOrder
}

input UserOrderByWithAggregationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
  gender: SortOrder
  desc: SortOrder
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
}

input UserScalarWhereWithAggregatesInput {
  AND: UserScalarWhereWithAggregatesInput
  OR: [UserScalarWhereWithAggregatesInput]
  NOT: UserScalarWhereWithAggregatesInput
  id: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  name: StringWithAggregatesFilter
  gender: BoolWithAggregatesFilter
  desc: StringNullableWithAggregatesFilter
}

type UserGroupByOutputType {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  gender: Boolean!
  desc: String
  _count: UserCountAggregateOutputType
  _min: UserMinAggregateOutputType
  _max: UserMaxAggregateOutputType
}

type Query {
  findFirstPost(
    where: PostWhereInput
    orderBy: [PostOrderByWithRelationInput]
    cursor: PostWhereUniqueInput
    take: Int
    skip: Int
    distinct: [PostScalarFieldEnum]
  ): Post
  findManyPost(
    where: PostWhereInput
    orderBy: [PostOrderByWithRelationInput]
    cursor: PostWhereUniqueInput
    take: Int
    skip: Int
    distinct: [PostScalarFieldEnum]
  ): [Post]!
  aggregatePost(
    where: PostWhereInput
    orderBy: [PostOrderByWithRelationInput]
    cursor: PostWhereUniqueInput
    take: Int
    skip: Int
  ): AggregatePost!
  groupByPost(
    where: PostWhereInput
    orderBy: [PostOrderByWithAggregationInput]
    by: [PostScalarFieldEnum]!
    having: PostScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [PostGroupByOutputType]!
  findUniquePost(where: PostWhereUniqueInput!): Post
  findFirstUser(
    where: UserWhereInput
    orderBy: [UserOrderByWithRelationInput]
    cursor: UserWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UserScalarFieldEnum]
  ): User
  findManyUser(
    where: UserWhereInput
    orderBy: [UserOrderByWithRelationInput]
    cursor: UserWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UserScalarFieldEnum]
  ): [User]!
  aggregateUser(
    where: UserWhereInput
    orderBy: [UserOrderByWithRelationInput]
    cursor: UserWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateUser!
  groupByUser(
    where: UserWhereInput
    orderBy: [UserOrderByWithAggregationInput]
    by: [UserScalarFieldEnum]!
    having: UserScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [UserGroupByOutputType]!
  findUniqueUser(where: UserWhereUniqueInput!): User
}

input UserCreateWithoutPostInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  gender: Boolean!
  desc: String
}

input UserCreateOrConnectWithoutPostInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutPostInput!
}

input UserCreateNestedOneWithoutPostInput {
  create: UserCreateWithoutPostInput
  connectOrCreate: UserCreateOrConnectWithoutPostInput
  connect: UserWhereUniqueInput
}

input PostCreateInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  title: String!
  published: Boolean!
  desc: String
  author: UserCreateNestedOneWithoutPostInput!
}

input StringFieldUpdateOperationsInput {
  set: String
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

input UserUpdateWithoutPostInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  gender: BoolFieldUpdateOperationsInput
  desc: NullableStringFieldUpdateOperationsInput
}

input UserUpsertWithoutPostInput {
  update: UserUpdateWithoutPostInput!
  create: UserCreateWithoutPostInput!
}

input UserUpdateOneRequiredWithoutPostInput {
  create: UserCreateWithoutPostInput
  connectOrCreate: UserCreateOrConnectWithoutPostInput
  upsert: UserUpsertWithoutPostInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutPostInput
}

input PostUpdateInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  desc: NullableStringFieldUpdateOperationsInput
  author: UserUpdateOneRequiredWithoutPostInput
}

input PostUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  desc: NullableStringFieldUpdateOperationsInput
}

type AffectedRowsOutput {
  count: Int!
}

input PostCreateWithoutAuthorInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  title: String!
  published: Boolean!
  desc: String
}

input PostCreateOrConnectWithoutAuthorInput {
  where: PostWhereUniqueInput!
  create: PostCreateWithoutAuthorInput!
}

input PostCreateNestedManyWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput
  connectOrCreate: PostCreateOrConnectWithoutAuthorInput
  connect: PostWhereUniqueInput
}

input UserCreateInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  gender: Boolean!
  desc: String
  Post: PostCreateNestedManyWithoutAuthorInput
}

input PostUpdateWithoutAuthorInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  desc: NullableStringFieldUpdateOperationsInput
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorInput!
  create: PostCreateWithoutAuthorInput!
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorInput!
}

input PostScalarWhereInput {
  AND: PostScalarWhereInput
  OR: [PostScalarWhereInput]
  NOT: PostScalarWhereInput
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  title: StringFilter
  published: BoolFilter
  desc: StringNullableFilter
  userId: StringFilter
}

input PostUpdateManyWithWhereWithoutAuthorInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyMutationInput!
}

input PostUpdateManyWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput
  connectOrCreate: PostCreateOrConnectWithoutAuthorInput
  upsert: PostUpsertWithWhereUniqueWithoutAuthorInput
  set: PostWhereUniqueInput
  disconnect: PostWhereUniqueInput
  delete: PostWhereUniqueInput
  connect: PostWhereUniqueInput
  update: PostUpdateWithWhereUniqueWithoutAuthorInput
  updateMany: PostUpdateManyWithWhereWithoutAuthorInput
  deleteMany: PostScalarWhereInput
}

input UserUpdateInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  gender: BoolFieldUpdateOperationsInput
  desc: NullableStringFieldUpdateOperationsInput
  Post: PostUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  gender: BoolFieldUpdateOperationsInput
  desc: NullableStringFieldUpdateOperationsInput
}

type Mutation {
  createOnePost(data: PostCreateInput!): Post!
  upsertOnePost(
    where: PostWhereUniqueInput!
    create: PostCreateInput!
    update: PostUpdateInput!
  ): Post!
  deleteOnePost(where: PostWhereUniqueInput!): Post
  updateOnePost(
    data: PostUpdateInput!
    where: PostWhereUniqueInput!
  ): Post
  updateManyPost(
    data: PostUpdateManyMutationInput!
    where: PostWhereInput
  ): AffectedRowsOutput!
  deleteManyPost(where: PostWhereInput): AffectedRowsOutput!
  createOneUser(data: UserCreateInput!): User!
  upsertOneUser(
    where: UserWhereUniqueInput!
    create: UserCreateInput!
    update: UserUpdateInput!
  ): User!
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateOneUser(
    data: UserUpdateInput!
    where: UserWhereUniqueInput!
  ): User
  updateManyUser(
    data: UserUpdateManyMutationInput!
    where: UserWhereInput
  ): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  executeRaw(
    query: String!
    parameters: Json
  ): Json!
  queryRaw(
    query: String!
    parameters: Json
  ): Json!
}

scalar DateTime
scalar Json
scalar UUID
scalar BigInt
scalar Decimal
scalar Bytes